/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/robolaunch/devspace-operator/pkg/api/roboscale.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DevSpaceVDILister helps list DevSpaceVDIs.
// All objects returned here must be treated as read-only.
type DevSpaceVDILister interface {
	// List lists all DevSpaceVDIs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DevSpaceVDI, err error)
	// DevSpaceVDIs returns an object that can list and get DevSpaceVDIs.
	DevSpaceVDIs(namespace string) DevSpaceVDINamespaceLister
	DevSpaceVDIListerExpansion
}

// devSpaceVDILister implements the DevSpaceVDILister interface.
type devSpaceVDILister struct {
	indexer cache.Indexer
}

// NewDevSpaceVDILister returns a new DevSpaceVDILister.
func NewDevSpaceVDILister(indexer cache.Indexer) DevSpaceVDILister {
	return &devSpaceVDILister{indexer: indexer}
}

// List lists all DevSpaceVDIs in the indexer.
func (s *devSpaceVDILister) List(selector labels.Selector) (ret []*v1alpha1.DevSpaceVDI, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DevSpaceVDI))
	})
	return ret, err
}

// DevSpaceVDIs returns an object that can list and get DevSpaceVDIs.
func (s *devSpaceVDILister) DevSpaceVDIs(namespace string) DevSpaceVDINamespaceLister {
	return devSpaceVDINamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DevSpaceVDINamespaceLister helps list and get DevSpaceVDIs.
// All objects returned here must be treated as read-only.
type DevSpaceVDINamespaceLister interface {
	// List lists all DevSpaceVDIs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DevSpaceVDI, err error)
	// Get retrieves the DevSpaceVDI from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DevSpaceVDI, error)
	DevSpaceVDINamespaceListerExpansion
}

// devSpaceVDINamespaceLister implements the DevSpaceVDINamespaceLister
// interface.
type devSpaceVDINamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DevSpaceVDIs in the indexer for a given namespace.
func (s devSpaceVDINamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DevSpaceVDI, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DevSpaceVDI))
	})
	return ret, err
}

// Get retrieves the DevSpaceVDI from the indexer for a given namespace and name.
func (s devSpaceVDINamespaceLister) Get(name string) (*v1alpha1.DevSpaceVDI, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("devspacevdi"), name)
	}
	return obj.(*v1alpha1.DevSpaceVDI), nil
}
