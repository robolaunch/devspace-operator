/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/robolaunch/devspace-operator/pkg/api/roboscale.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DevSuiteLister helps list DevSuites.
// All objects returned here must be treated as read-only.
type DevSuiteLister interface {
	// List lists all DevSuites in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DevSuite, err error)
	// DevSuites returns an object that can list and get DevSuites.
	DevSuites(namespace string) DevSuiteNamespaceLister
	DevSuiteListerExpansion
}

// devSuiteLister implements the DevSuiteLister interface.
type devSuiteLister struct {
	indexer cache.Indexer
}

// NewDevSuiteLister returns a new DevSuiteLister.
func NewDevSuiteLister(indexer cache.Indexer) DevSuiteLister {
	return &devSuiteLister{indexer: indexer}
}

// List lists all DevSuites in the indexer.
func (s *devSuiteLister) List(selector labels.Selector) (ret []*v1alpha1.DevSuite, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DevSuite))
	})
	return ret, err
}

// DevSuites returns an object that can list and get DevSuites.
func (s *devSuiteLister) DevSuites(namespace string) DevSuiteNamespaceLister {
	return devSuiteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DevSuiteNamespaceLister helps list and get DevSuites.
// All objects returned here must be treated as read-only.
type DevSuiteNamespaceLister interface {
	// List lists all DevSuites in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DevSuite, err error)
	// Get retrieves the DevSuite from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DevSuite, error)
	DevSuiteNamespaceListerExpansion
}

// devSuiteNamespaceLister implements the DevSuiteNamespaceLister
// interface.
type devSuiteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DevSuites in the indexer for a given namespace.
func (s devSuiteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DevSuite, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DevSuite))
	})
	return ret, err
}

// Get retrieves the DevSuite from the indexer for a given namespace and name.
func (s devSuiteNamespaceLister) Get(name string) (*v1alpha1.DevSuite, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("devsuite"), name)
	}
	return obj.(*v1alpha1.DevSuite), nil
}
